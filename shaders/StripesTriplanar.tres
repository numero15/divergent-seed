[gd_resource type="Shader" format=2]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,vertex_lighting,world_vertex_coords;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying vec3 world_position;
varying vec3 mesh_position;
varying vec3 vertex_pos;
uniform float gradient_scale : hint_range(0,5);
uniform float gradient_offset : hint_range(-1000,1000 ,0.001 );
uniform sampler2D gradient : hint_black;


void vertex() {
	ROUGHNESS=roughness;
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	world_position = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	mesh_position = (vec4(VERTEX, 1.0)).xyz;
	vertex_pos = ( WORLD_MATRIX  * vec4(VERTEX, 1.0)).xyz;
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	
	vec3 color1 = vec3(texture(gradient,vec2((vertex_pos.y+gradient_offset)*gradient_scale,0.0)).rgb);
	vec3 color2 = albedo_tex.rgb;
	vec3 output_color;
	vec3 white = vec3(0,0,0);
	float greyscale = dot(color1, vec3(0.299,0.587,0.114));
	if(greyscale<.5)
		output_color = (vec3(2,2,2) * color1.rgb - white) *(color2.rgb - color2.rgb*color2.rgb) + color2.rgb;
	else
		output_color = (vec3(2,2,2) * color1.rgb - white) *(sqrt(color2.rgb) - color2.rgb) + color2.rgb;
			
	
	ALBEDO = color1*color2;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"
